@model List<AspNetCoreHero.Boilerplate.Application.Features.Tickets.Queries.GetAllPaged.GetAllTicketsResponse>;


@{
    ViewData["Title"] = localizer["Support Tickets"];
    ViewData["Caption"] = localizer[""];
}

<div class="content-wrapper mrl-zero h-100" id="contentWrapper">
    <a onclick="jQueryModalGet('/admin/user/OnGetSupportCreate','Create Ticket')" class="btn btn-primary text-white my-3">
        <i class="fa fa-plus-square"></i> Create Ticket
    </a>
    <!-- Existing code for displaying total, active, on-hold, and closed tickets -->
    <div class="card card-primary card-tabs tree-tabs">
        <div class="card-header d-flex align-items-center">
            <h3 class="card-title">
                <i class="fas fa-solid fa-clipboard-list"></i>
                Tickets Listing
            </h3>
            <div class="card-tools ml-auto">
                <form class="form-inline ml-3">
                    <div class="input-group input-group-sm">
                        <input class="form-control form-control-navbar" type="search" placeholder="Search" aria-label="Search">
                        <div class="input-group-append">
                            <button class="btn btn-navbar btn-default" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="card-body overflow-auto">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Ticket Code</th>
                        <th>Ticket Detail</th>
                        <th>Issued Date/Time</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>

          @*           <tr>
                        <td>TKT_00123</td>
                        <td>Yet to Submit</td>
                        <td>09-02-2024 | 18:33:00</td>
                        <td>Pending</td>
                    </tr> *@

                    @foreach (var ticket in Model)
                    {
                        <tr>
                            <td class="ellipsis">
                               @*  @{
                                    var lastFourDigits = ticket.Id.ToString("N").Substring(0, 6);
                                }
                                @lastFourDigits *@
                                @ticket.Code
                            </td>
                            <td>@ticket.Description</td>
                            <td>@ticket.CreatedDate.ToString("dd-MM-yyyy hh:mm:ss")</td>
                            <td>
                                <span class="badge bg-@GetStatusColor("InProgress")">@ticket.Status</span>
                            </td>
                            @*<td class="d-flex">*@
                            @* <button class="btn" type="button" onclick="openEditModal('@ticket.Id','@ticket.Description')" data-ticket-id="@ticket.Id" data-ticket-description="@ticket.Description" data-ticket-status="@ticket.Status"><i class="fas fa-pen"></i></button> *@
                            @* <button class="btn" type="button" onclick="deleteTicket('@ticket.Id')"><i class="fas fa-trash text-danger"></i></button> *@

                            @*</td>
                        *@
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
</div>

@functions {
    // Helper method to determine badge color based on ticket status
    string GetStatusColor(string status)
    {
        switch (status.ToLower())
        {
            case "new":
                return "danger";
            case "in-progress":
                return "primary";
            case "closed":
                return "secondary";
            default:
                return "light";
        }
    }
}

            @section scripts
            {
    <script>
        function openEditModal(ticketId, description) {
            var url = '/admin/user/OnSupportEdit?ticketId=' + ticketId + '&description=' + encodeURIComponent(description);
            var title = 'Edit Ticket';
            jQueryModalGet(url, title);
        }

        function deleteTicket(ticketId) {
            // Make API call to delete ticket
            // Similar to the edit function, use fetch or your preferred library
            fetch('/api/tickets/' + ticketId, {
                method: 'DELETE',
            })
                .then(response => {
                    // Handle response, e.g., refresh the page or update UI
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
}
